# üöÄ CONFIGURACI√ìN DE PUERTOS - EJEMPLO
# Copia este archivo como .env.local para desarrollo

# ========================================
# üéØ CONFIGURACI√ìN DE BACKEND
# ========================================

# Django API REST + WebRTC (Puerto 8000)
REACT_APP_API_URL=http://127.0.0.1:8000/api
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000

# WebRTC Socket.IO (mismo puerto que Django - Puerto 8000)
NEXT_PUBLIC_WEBRTC_URL=http://127.0.0.1:8000

# WebSocket tradicional (Puerto 8000) 
NEXT_PUBLIC_WS_URL=ws://127.0.0.1:8000/ws

# ========================================
# üö® CONFIGURACI√ìN DE PROXY
# ========================================
NO_PROXY=localhost,127.0.0.1,0.0.0.0
HTTP_PROXY=
HTTPS_PROXY=
http_proxy=
https_proxy=

# ========================================
# üîê CONFIGURACI√ìN DE AUTENTICACI√ìN
# ========================================
NEXT_PUBLIC_JWT_REFRESH_TIME=15m
NEXT_PUBLIC_SESSION_TIMEOUT=24h

# ========================================
# üèóÔ∏è CONFIGURACI√ìN DE APLICACI√ìN
# ========================================
NEXT_PUBLIC_APP_NAME="CondoManager"
NEXT_PUBLIC_APP_VERSION="1.0.0"
NEXT_PUBLIC_ENVIRONMENT=development

# ========================================
# üìã SERVICIOS BACKEND REQUERIDOS:
# ========================================
# Terminal 1: python manage.py runserver 0.0.0.0:8000    (Django API + WebRTC integrado)
# Terminal 2: npm run dev                                  (Frontend Next.js puerto 3000)
# 
# ‚úÖ VENTAJA: Todo en un solo puerto (8000) - m√°s f√°cil despliegue
# ========================================